"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerCollector = void 0;
const sudt_collector_1 = require("./sudt-collector");
const __1 = require("..");
const ckb_indexer_1 = require("../helpers/ckb-indexer");
class IndexerCollector extends sudt_collector_1.SUDTCollector {
    constructor(apiBase) {
        super();
        this.apiBase = apiBase;
        this.indexer = new ckb_indexer_1.CkbIndexer(apiBase);
    }
    async getBalance(address) {
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ckb_indexer_1.ScriptType.lock,
            filter: {
                output_data_len_range: ['0x0', '0x1'],
            },
        };
        const cells = (await this.indexer.getCells(searchKey)).filter((cell) => cell.output.type === null);
        let balance = __1.Amount.ZERO;
        cells.forEach((cell) => {
            const amount = new __1.Amount(cell.output.capacity, __1.AmountUnit.shannon);
            balance = balance.add(amount);
        });
        return balance;
    }
    async collect(address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        let accCapacity = __1.Amount.ZERO;
        const terminator = (_index, cell) => {
            if (accCapacity.gte(options.neededAmount)) {
                return { stop: true, push: false };
            }
            if (cell.output_data.length / 2 - 1 > 0 || cell.output.type !== null) {
                return { stop: false, push: false };
            }
            else {
                accCapacity = accCapacity.add(new __1.Amount(cell.output.capacity, __1.AmountUnit.shannon));
                return { stop: false, push: true };
            }
        };
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ckb_indexer_1.ScriptType.lock,
            filter: {
                output_data_len_range: ['0x0', '0x1'],
            },
        };
        const cells = await this.indexer.getCells(searchKey, terminator);
        return cells.map((cell) => ckb_indexer_1.IndexerCellToCell(cell));
    }
    async getSUDTBalance(sudt, address) {
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ckb_indexer_1.ScriptType.lock,
            filter: {
                script: sudt.toTypeScript().serializeJson(),
            },
        };
        const cells = await this.indexer.getCells(searchKey);
        let balance = __1.Amount.ZERO;
        cells.forEach((cell) => {
            const amount = __1.Amount.fromUInt128LE(cell.output_data);
            balance = balance.add(amount);
        });
        return balance;
    }
    async collectSUDT(sudt, address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ckb_indexer_1.ScriptType.lock,
            filter: {
                script: sudt.toTypeScript().serializeJson(),
            },
        };
        let accCapacity = __1.Amount.ZERO;
        const terminator = (_index, cell) => {
            if (accCapacity.gte(options.neededAmount)) {
                return { stop: true, push: false };
            }
            accCapacity = accCapacity.add(__1.Amount.fromUInt128LE(cell.output_data));
            return { stop: false, push: true };
        };
        const cells = await this.indexer.getCells(searchKey, terminator);
        return cells.map((cell) => ckb_indexer_1.IndexerCellToCell(cell));
    }
}
exports.IndexerCollector = IndexerCollector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlci1jb2xsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sbGVjdG9ycy9pbmRleGVyLWNvbGxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxREFBaUQ7QUFDakQsMEJBQTZEO0FBQzdELHdEQU9nQztBQUVoQyxNQUFhLGdCQUFpQixTQUFRLDhCQUFhO0lBRWpELFlBQW1CLE9BQWU7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFEUyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQWdCO1FBQy9CLE1BQU0sU0FBUyxHQUFHO1lBQ2hCLE1BQU0sRUFBRSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsYUFBYSxFQUFZO1lBQ3hELFdBQVcsRUFBRSx3QkFBVSxDQUFDLElBQUk7WUFDNUIsTUFBTSxFQUFFO2dCQUNOLHFCQUFxQixFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBMkI7YUFDaEU7U0FDRixDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUMzRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUNwQyxDQUFDO1FBQ0YsSUFBSSxPQUFPLEdBQUcsVUFBTSxDQUFDLElBQUksQ0FBQztRQUMxQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsY0FBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BFLE9B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