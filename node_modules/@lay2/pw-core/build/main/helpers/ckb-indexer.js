"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerCellToCell = exports.CkbIndexer = exports.DefaultTerminator = exports.Order = exports.ScriptType = void 0;
const axios_1 = __importDefault(require("axios"));
const __1 = require("..");
var ScriptType;
(function (ScriptType) {
    ScriptType["type"] = "type";
    ScriptType["lock"] = "lock";
})(ScriptType = exports.ScriptType || (exports.ScriptType = {}));
var Order;
(function (Order) {
    Order["asc"] = "asc";
    Order["desc"] = "desc";
})(Order = exports.Order || (exports.Order = {}));
exports.DefaultTerminator = (_index, _cell) => {
    return { stop: false, push: true };
};
class CkbIndexer {
    constructor(ckbIndexerUrl) {
        this.ckbIndexerUrl = ckbIndexerUrl;
    }
    async request(method, params) {
        const data = {
            id: 0,
            jsonrpc: '2.0',
            method,
            params,
        };
        const res = await axios_1.default.post(this.ckbIndexerUrl, data);
        if (res.status !== 200) {
            throw new Error(`indexer request failed with HTTP code ${res.status}`);
        }
        if (res.data.error !== undefined) {
            throw new Error(`indexer request rpc failed with error: ${JSON.stringify(res.data.error)}`);
        }
        return res.data.result;
    }
    async getCells(searchKey, terminator = exports.DefaultTerminator, { sizeLimit = 0x100, order = Order.asc, } = {}) {
        const infos = [];
        let cursor = null;
        let index = 0;
        const params = [searchKey, order, `0x${sizeLimit.toString(16)}`, cursor];
        while (true) {
            const res = await this.request('get_cells', params);
            const liveCells = res.objects;
            cursor = res.lastCursor;
            for (const cell of liveCells) {
                const { stop, push } = terminator(index, cell);
                if (push) {
                    infos.push(cell);
                }
                if (stop) {
                    return infos;
                }
                index++;
            }
            if (liveCells.length < sizeLimit) {
                break;
            }
        }
        return infos;
    }
}
exports.CkbIndexer = CkbIndexer;
function IndexerCellToCell(cell) {
    return new __1.Cell(new __1.Amount(cell.output.capacity, __1.AmountUnit.shannon), __1.Script.fromRPC(cell.output.lock), __1.Script.fromRPC(cell.output.type), __1.OutPoint.fromRPC(cell.out_point), cell.output_data);
}
exports.IndexerCellToCell = IndexerCellToCell;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tiLWluZGV4ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9ja2ItaW5kZXhlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsMEJBQTRFO0FBRTVFLElBQVksVUFHWDtBQUhELFdBQVksVUFBVTtJQUNwQiwyQkFBYSxDQUFBO0lBQ2IsMkJBQWEsQ0FBQTtBQUNmLENBQUMsRUFIVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQUdyQjtBQUVELElBQVksS0FHWDtBQUhELFdBQVksS0FBSztJQUNmLG9CQUFXLENBQUE7SUFDWCxzQkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQUhXLEtBQUssR0FBTCxhQUFLLEtBQUwsYUFBSyxRQUdoQjtBQWdEWSxRQUFBLGlCQUFpQixHQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQzdELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFFRixNQUFhLFVBQVU7SUFDckIsWUFBbUIsYUFBcUI7UUFBckIsa0JBQWEsR0FBYixhQUFhLENBQVE7SUFBRyxDQUFDO0lBRTVDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBYyxFQUFFLE1BQVk7UUFDeEMsTUFBTSxJQUFJLEdBQUc7WUFDWCxFQUFFLEVBQUUsQ0FBQztZQUNMLE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTTtZQUNOLE1BQU07U0FDUCxDQUFDO1FBQ0YsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUN4RTtRQUNELElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQ2IsMENBQTBDLElBQUksQ0FBQyxTQUFTLENBQ3RELEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUNmLEVBQUUsQ0FDSixDQUFDO1NBQ0g7UUFDRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUSxDQUNuQixTQUFvQixFQUNwQixhQUF5Qix5QkFBaUIsRUFDMUMsRUFDRSxTQUFTLEdBQUcsS0FBSyxFQUNqQixLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsTUFDd0IsRUFBRTtRQUU3QyxNQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO1FBQ2hDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxNQUFNLE1BQU0sR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekUsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7WUFDOUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7WUFDeEIsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLEVBQUU7Z0JBQzVCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDL0MsSUFBSSxJQUFJLEVBQUU7b0JBQ1IsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDbEI7Z0JBQ0QsSUFBSSxJQUFJLEVBQUU7b0JBQ1IsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsS0FBSyxFQUFFLENBQUM7YUFDVDtZQUNELElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxTQUFTLEVBQUU7Z0JBQ2hDLE1BQU07YUFDUDtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUF4REQsZ0NBd0RDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFBaUI7SUFDakQsT0FBTyxJQUFJLFFBQUksQ0FDYixJQUFJLFVBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxjQUFVLENBQUMsT0FBTyxDQUFDLEVBQ3BELFVBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDbEMsVUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUNsQyxZQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FDakIsQ0FBQztBQUNKLENBQUM7QUFSRCw4Q0FRQyJ9