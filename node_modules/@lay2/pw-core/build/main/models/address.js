"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = exports.getDefaultPrefix = exports.LockType = exports.AddressType = exports.AddressPrefix = void 0;
const script_1 = require("./script");
const core_1 = __importStar(require("../core"));
const interfaces_1 = require("../interfaces");
const eosjs_ecc_1 = __importDefault(require("eosjs-ecc"));
const utils_1 = require("../utils");
const ckb_sdk_utils_1 = require("@nervosnetwork/ckb-sdk-utils");
const bs58_1 = __importDefault(require("bs58"));
const axios_1 = __importDefault(require("axios"));
const core_2 = __importDefault(require("@scatterjs/core"));
const hashers_1 = require("../hashers");
const ckb_js_toolkit_1 = require("ckb-js-toolkit");
const amount_1 = require("./amount");
var AddressPrefix;
(function (AddressPrefix) {
    AddressPrefix[AddressPrefix["ckb"] = 0] = "ckb";
    AddressPrefix[AddressPrefix["ckt"] = 1] = "ckt";
})(AddressPrefix = exports.AddressPrefix || (exports.AddressPrefix = {}));
var AddressType;
(function (AddressType) {
    AddressType[AddressType["ckb"] = 0] = "ckb";
    AddressType[AddressType["eth"] = 1] = "eth";
    AddressType[AddressType["eos"] = 2] = "eos";
    AddressType[AddressType["tron"] = 3] = "tron";
    // libra,
})(AddressType = exports.AddressType || (exports.AddressType = {}));
var LockType;
(function (LockType) {
    LockType[LockType["default"] = 0] = "default";
    LockType[LockType["multisig"] = 1] = "multisig";
    LockType[LockType["pw"] = 2] = "pw";
})(LockType = exports.LockType || (exports.LockType = {}));
function getDefaultPrefix() {
    return core_1.default.chainId === core_1.ChainID.ckb ? AddressPrefix.ckb : AddressPrefix.ckt;
}
exports.getDefaultPrefix = getDefaultPrefix;
class Address {
    constructor(addressString, addressType, lockArgs) {
        this.addressString = addressString;
        this.addressType = addressType;
        this.lockArgs = lockArgs;
        if (!lockArgs) {
            switch (addressType) {
                case AddressType.eth:
                    this.addressString = addressString.toLowerCase();
                    this.lockArgs = this.addressString;
                    break;
                case AddressType.eos:
                    throw new Error('lock args must provided for eos address');
                case AddressType.tron:
                    this.lockArgs =
                        '0x' +
                            Buffer.from(bs58_1.default.decode(addressString)).toString('hex', 1, 21);
                    break;
                case AddressType.ckb:
                    const lock = utils_1.parseAddress(this.addressString, {
                        config: utils_1.LumosConfigs[getDefaultPrefix()],
                    });
                    this.lockArgs = lock.args;
                    break;
            }
        }
    }
    static fromLockScript(lockScript, prefix = getDefaultPrefix()) {
        const addressString = utils_1.generateAddress(lockScript.serializeJson(), {
            config: utils_1.LumosConfigs[prefix],
        });
        return new Address(addressString, AddressType.ckb);
    }
    static async getEosLockArgs(networkJSON, account) {
        const network = core_2.default.Network.fromJson(networkJSON);
        const baseUrl = network.fullhost();
        const res = await axios_1.default.post(`${baseUrl}/v1/chain/get_account`, {
            account_name: account,
        });
        const data = res.data;
        const pubkey = data.permissions[0].required_auth.keys[0].key;
        const publicKeyHex = eosjs_ecc_1.default.PublicKey(pubkey).toUncompressed().toHex();
        const publicHash = new hashers_1.Keccak256Hasher()
            .hash(new ckb_js_toolkit_1.Reader(`0x${publicKeyHex.slice(2)}`))
            .serializeJson();
        const lockArgs = '0x' + publicHash.slice(-40);
        return lockArgs;
    }
    valid() {
        switch (this.addressType) {
            case AddressType.ckb:
                return utils_1.verifyCkbAddress(this.addressString);
            case AddressType.eth:
                return utils_1.verifyEthAddress(this.addressString);
            case AddressType.eos:
                return utils_1.verifyEosAddress(this.addressString);
            case AddressType.tron:
                return utils_1.verifyTronAddress(this.addressString);
            default:
                return true;
        }
    }
    minPaymentAmount() {
        if (this.isAcp()) {
            return new amount_1.Amount('1', amount_1.AmountUnit.shannon);
        }
        const bytes = utils_1.cellOccupiedBytes({
            lock: this.toLockScript(),
            type: null,
            data: '0x',
        });
        return new amount_1.Amount(bytes.toString());
    }
    isAcp() {
        const script = this.toLockScript();
        const { codeHash, hashType } = script;
        const acpLock = core_1.default.config.acpLockList.filter((x) => x.codeHash === codeHash && x.hashType === hashType);
        return acpLock && acpLock.length > 0;
    }
    toCKBAddress() {
        if (this.addressType === AddressType.ckb) {
            return this.addressString;
        }
        const { args, codeHash, hashType } = this.toLockScript();
        return ckb_sdk_utils_1.fullPayloadToAddress({
            args,
            codeHash,
            type: hashType === interfaces_1.HashType.data ? ckb_sdk_utils_1.AddressType.DataCodeHash : ckb_sdk_utils_1.AddressType.TypeCodeHash,
            prefix: getDefaultPrefix() === AddressPrefix.ckb
                ? ckb_sdk_utils_1.AddressPrefix.Mainnet
                : ckb_sdk_utils_1.AddressPrefix.Testnet,
        });
    }
    toLockScript() {
        if (this.addressType !== AddressType.ckb) {
            const { codeHash, hashType } = core_1.default.config.pwLock.script;
            return new script_1.Script(codeHash, this.lockArgs, hashType);
        }
        const lock = utils_1.parseAddress(this.addressString, {
            config: utils_1.LumosConfigs[getDefaultPrefix()],
        });
        return new script_1.Script(lock.code_hash, lock.args, interfaces_1.HashType[lock.hash_type]);
    }
}
exports.Address = Address;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUNBQWtDO0FBQ2xDLGdEQUEwQztBQUMxQyw4Q0FBeUM7QUFDekMsMERBQTRCO0FBQzVCLG9DQVNrQjtBQUNsQixnRUFJc0M7QUFDdEMsZ0RBQXdCO0FBQ3hCLGtEQUEwQjtBQUMxQiwyREFBd0M7QUFDeEMsd0NBQTZDO0FBQzdDLG1EQUF3QztBQUN4QyxxQ0FBOEM7QUFFOUMsSUFBWSxhQUdYO0FBSEQsV0FBWSxhQUFhO0lBQ3ZCLCtDQUFHLENBQUE7SUFDSCwrQ0FBRyxDQUFBO0FBQ0wsQ0FBQyxFQUhXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBR3hCO0FBRUQsSUFBWSxXQU1YO0FBTkQsV0FBWSxXQUFXO0lBQ3JCLDJDQUFHLENBQUE7SUFDSCwyQ0FBRyxDQUFBO0lBQ0gsMkNBQUcsQ0FBQTtJQUNILDZDQUFJLENBQUE7SUFDSixTQUFTO0FBQ1gsQ0FBQyxFQU5XLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBTXRCO0FBRUQsSUFBWSxRQUlYO0FBSkQsV0FBWSxRQUFRO0lBQ2xCLDZDQUFPLENBQUE7SUFDUCwrQ0FBUSxDQUFBO0lBQ1IsbUNBQUUsQ0FBQTtBQUNKLENBQUMsRUFKVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQUluQjtBQUVELFNBQWdCLGdCQUFnQjtJQUM5QixPQUFPLGNBQU0sQ0FBQyxPQUFPLEtBQUssY0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQztBQUNoRixDQUFDO0FBRkQsNENBRUM7QUFFRCxNQUFhLE9BQU87SUErQmxCLFlBQ1csYUFBcUIsRUFDckIsV0FBd0IsRUFDeEIsUUFBaUI7UUFG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