import { RPC, transformers } from 'ckb-js-toolkit';
import { CHAIN_SPECS } from './constants';
import { DefaultSigner } from './signers';
import { Collector } from './collectors';
import { SimpleBuilder, Builder, SimpleSUDTACPBuilder, SimpleSUDTBuilder, } from './builders';
import { Provider } from './providers';
export var ChainID;
(function (ChainID) {
    ChainID[ChainID["ckb"] = 0] = "ckb";
    ChainID[ChainID["ckb_testnet"] = 1] = "ckb_testnet";
    ChainID[ChainID["ckb_dev"] = 2] = "ckb_dev";
})(ChainID || (ChainID = {}));
/**
 * The default main class of pw-core
 */
export default class PWCore {
    constructor(nodeUrl) {
        this._rpc = new RPC(nodeUrl);
    }
    /**
     * Initialize the environment required by pw-core
     */
    async init(provider, defaultCollector, chainId, config) {
        if (chainId) {
            if (!(chainId in ChainID)) {
                throw new Error(`invalid chainId ${chainId}`);
            }
            PWCore.chainId = chainId;
        }
        else {
            const info = await this.rpc.get_blockchain_info();
            PWCore.chainId = {
                ckb: ChainID.ckb,
                ckb_testnet: ChainID.ckb_testnet,
                ckb_dev: ChainID.ckb_dev,
            }[info.chain];
        }
        if (PWCore.chainId === ChainID.ckb_dev) {
            if (!config) {
                throw new Error('config must be provided for dev chain');
            }
            PWCore.config = config;
        }
        else {
            // merge customized config to default one
            PWCore.config = {
                ...[CHAIN_SPECS.Lina, CHAIN_SPECS.Aggron][PWCore.chainId],
                ...config,
            };
        }
        if (provider instanceof Provider) {
            PWCore.provider = await provider.init();
        }
        else {
            throw new Error('provider must be provided');
        }
        if (defaultCollector instanceof Collector) {
            PWCore.defaultCollector = defaultCollector;
        }
        else {
            throw new Error('defaultCollector must be provided');
        }
        return this;
    }
    /**
     * Return a RPC instance defined in package 'ckb-js-toolkit'
     */
    get rpc() {
        return this._rpc;
    }
    /**
     * Transfer CKB to any address
     * @param address The receiver's address
     * @param amount The amount of CKB to send
     * @param options The transaction builder options for this transaction.
     */
    async send(address, amount, options) {
        const simpleBuilder = new SimpleBuilder(address, amount, options);
        return this.sendTransaction(simpleBuilder);
    }
    /**
     * Send an built transaction or a builder
     * @param toSend
     * @param signer
     */
    async sendTransaction(toSend, signer) {
        const tx = toSend instanceof Builder ? await toSend.build() : toSend;
        tx.validate();
        if (!signer) {
            signer = new DefaultSigner(PWCore.provider);
        }
        return this.rpc.send_transaction(transformers.TransformTransaction(await signer.sign(tx)));
    }
    /**
     * Transfer sudt to any address
     * @param sudt The sudt definition
     * @param address the receiver's address
     * @param amount the aount of sudt to send
     * @param options The transaction builder options for this transaction.
     * @returns the transaction hash
     */
    async sendSUDT(sudt, address, amount, createAcp, signer, options) {
        const builder = createAcp
            ? new SimpleSUDTBuilder(sudt, address, amount, options)
            : new SimpleSUDTACPBuilder(sudt, address, amount, options);
        return this.sendTransaction(builder, signer);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUcxQyxPQUFPLEVBQUUsYUFBYSxFQUFVLE1BQU0sV0FBVyxDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUNMLGFBQWEsRUFDYixPQUFPLEVBQ1Asb0JBQW9CLEVBQ3BCLGlCQUFpQixHQUVsQixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3ZDLE1BQU0sQ0FBTixJQUFZLE9BSVg7QUFKRCxXQUFZLE9BQU87SUFDakIsbUNBQUcsQ0FBQTtJQUNILG1EQUFXLENBQUE7SUFDWCwyQ0FBTyxDQUFBO0FBQ1QsQ0FBQyxFQUpXLE9BQU8sS0FBUCxPQUFPLFFBSWxCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsT0FBTyxPQUFPLE1BQU07SUFRekIsWUFBWSxPQUFlO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLElBQUksQ0FDUixRQUFrQixFQUNsQixnQkFBMkIsRUFDM0IsT0FBaUIsRUFDakIsTUFBZTtRQUVmLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFO2dCQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixPQUFPLEVBQUUsQ0FBQyxDQUFDO2FBQy9DO1lBQ0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDMUI7YUFBTTtZQUNMLE1B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