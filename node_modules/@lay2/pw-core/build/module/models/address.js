import { Script } from './script';
import PWCore, { ChainID } from '../core';
import { HashType } from '../interfaces';
import ecc from 'eosjs-ecc';
import { parseAddress, generateAddress, LumosConfigs, verifyCkbAddress, verifyEthAddress, verifyEosAddress, verifyTronAddress, cellOccupiedBytes, } from '../utils';
import { fullPayloadToAddress, AddressType as AType, AddressPrefix as APrefix, } from '@nervosnetwork/ckb-sdk-utils';
import bs58 from 'bs58';
import axios from 'axios';
import ScatterJS from '@scatterjs/core';
import { Keccak256Hasher } from '../hashers';
import { Reader } from 'ckb-js-toolkit';
import { Amount, AmountUnit } from './amount';
export var AddressPrefix;
(function (AddressPrefix) {
    AddressPrefix[AddressPrefix["ckb"] = 0] = "ckb";
    AddressPrefix[AddressPrefix["ckt"] = 1] = "ckt";
})(AddressPrefix || (AddressPrefix = {}));
export var AddressType;
(function (AddressType) {
    AddressType[AddressType["ckb"] = 0] = "ckb";
    AddressType[AddressType["eth"] = 1] = "eth";
    AddressType[AddressType["eos"] = 2] = "eos";
    AddressType[AddressType["tron"] = 3] = "tron";
    // libra,
})(AddressType || (AddressType = {}));
export var LockType;
(function (LockType) {
    LockType[LockType["default"] = 0] = "default";
    LockType[LockType["multisig"] = 1] = "multisig";
    LockType[LockType["pw"] = 2] = "pw";
})(LockType || (LockType = {}));
export function getDefaultPrefix() {
    return PWCore.chainId === ChainID.ckb ? AddressPrefix.ckb : AddressPrefix.ckt;
}
export class Address {
    constructor(addressString, addressType, lockArgs) {
        this.addressString = addressString;
        this.addressType = addressType;
        this.lockArgs = lockArgs;
        if (!lockArgs) {
            switch (addressType) {
                case AddressType.eth:
                    this.addressString = addressString.toLowerCase();
                    this.lockArgs = this.addressString;
                    break;
                case AddressType.eos:
                    throw new Error('lock args must provided for eos address');
                case AddressType.tron:
                    this.lockArgs =
                        '0x' +
                            Buffer.from(bs58.decode(addressString)).toString('hex', 1, 21);
                    break;
                case AddressType.ckb:
                    const lock = parseAddress(this.addressString, {
                        config: LumosConfigs[getDefaultPrefix()],
                    });
                    this.lockArgs = lock.args;
                    break;
            }
        }
    }
    static fromLockScript(lockScript, prefix = getDefaultPrefix()) {
        const addressString = generateAddress(lockScript.serializeJson(), {
            config: LumosConfigs[prefix],
        });
        return new Address(addressString, AddressType.ckb);
    }
    static async getEosLockArgs(networkJSON, account) {
        const network = ScatterJS.Network.fromJson(networkJSON);
        const baseUrl = network.fullhost();
        const res = await axios.post(`${baseUrl}/v1/chain/get_account`, {
            account_name: account,
        });
        const data = res.data;
        const pubkey = data.permissions[0].required_auth.keys[0].key;
        const publicKeyHex = ecc.PublicKey(pubkey).toUncompressed().toHex();
        const publicHash = new Keccak256Hasher()
            .hash(new Reader(`0x${publicKeyHex.slice(2)}`))
            .serializeJson();
        const lockArgs = '0x' + publicHash.slice(-40);
        return lockArgs;
    }
    valid() {
        switch (this.addressType) {
            case AddressType.ckb:
                return verifyCkbAddress(this.addressString);
            case AddressType.eth:
                return verifyEthAddress(this.addressString);
            case AddressType.eos:
                return verifyEosAddress(this.addressString);
            case AddressType.tron:
                return verifyTronAddress(this.addressString);
            default:
                return true;
        }
    }
    minPaymentAmount() {
        if (this.isAcp()) {
            return new Amount('1', AmountUnit.shannon);
        }
        const bytes = cellOccupiedBytes({
            lock: this.toLockScript(),
            type: null,
            data: '0x',
        });
        return new Amount(bytes.toString());
    }
    isAcp() {
        const script = this.toLockScript();
        const { codeHash, hashType } = script;
        const acpLock = PWCore.config.acpLockList.filter((x) => x.codeHash === codeHash && x.hashType === hashType);
        return acpLock && acpLock.length > 0;
    }
    toCKBAddress() {
        if (this.addressType === AddressType.ckb) {
            return this.addressString;
        }
        const { args, codeHash, hashType } = this.toLockScript();
        return fullPayloadToAddress({
            args,
            codeHash,
            type: hashType === HashType.data ? AType.DataCodeHash : AType.TypeCodeHash,
            prefix: getDefaultPrefix() === AddressPrefix.ckb
                ? APrefix.Mainnet
                : APrefix.Testnet,
        });
    }
    toLockScript() {
        if (this.addressType !== AddressType.ckb) {
            const { codeHash, hashType } = PWCore.config.pwLock.script;
            return new Script(codeHash, this.lockArgs, hashType);
        }
        const lock = parseAddress(this.addressString, {
            config: LumosConfigs[getDefaultPrefix()],
        });
        return new Script(lock.code_hash, lock.args, HashType[lock.hash_type]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBQzVCLE9BQU8sRUFDTCxZQUFZLEVBQ1osZUFBZSxFQUNmLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsaUJBQWlCLEdBQ2xCLE1BQU0sVUFBVSxDQUFDO0FBQ2xCLE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsV0FBVyxJQUFJLEtBQUssRUFDcEIsYUFBYSxJQUFJLE9BQU8sR0FDekIsTUFBTSw4QkFBOEIsQ0FBQztBQUN0QyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sU0FBUyxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDN0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTlDLE1BQU0sQ0FBTixJQUFZLGFBR1g7QUFIRCxXQUFZLGFBQWE7SUFDdkIsK0NBQUcsQ0FBQTtJQUNILCtDQUFHLENBQUE7QUFDTCxDQUFDLEVBSFcsYUFBYSxLQUFiLGFBQWEsUUFHeEI7QUFFRCxNQUFNLENBQU4sSUFBWSxXQU1YO0FBTkQsV0FBWSxXQUFXO0lBQ3JCLDJDQUFHLENBQUE7SUFDSCwyQ0FB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