import PWCore from '../core';
import { SerializeRawTransaction } from '@ckb-lumos/types/lib/core';
import { validators, normalizers, Reader, transformers } from 'ckb-js-toolkit';
import { Blake2bHasher } from '../hashers';
export class RawTransaction {
    constructor(inputCells, outputs, cellDeps = [
        PWCore.config.defaultLock.cellDep,
        PWCore.config.pwLock.cellDep,
    ], headerDeps = [], version = '0x0') {
        this.inputCells = inputCells;
        this.outputs = outputs;
        this.cellDeps = cellDeps;
        this.headerDeps = headerDeps;
        this.version = version;
        this.inputs = inputCells.map((i) => i.toCellInput());
        this.outputsData = this.outputs.map((o) => o.getHexData());
    }
    sameWith(raw) {
        validators.ValidateTransaction(transformers.TransformTransaction(raw));
        return raw.toHash() === this.toHash();
    }
    toHash() {
        const rawTx = transformers.TransformRawTransaction(this);
        const hasher = new Blake2bHasher();
        return hasher
            .hash(new Reader(SerializeRawTransaction(normalizers.NormalizeRawTransaction(rawTx))))
            .serializeJson();
    }
    validate() {
        validators.ValidateRawTransaction(transformers.TransformRawTransaction(this));
        return true;
    }
    serializeJson() {
        return {
            version: this.version,
            cell_deps: this.cellDeps,
            header_deps: this.headerDeps,
            inputs: this.inputs,
            outputs: this.outputs,
            outputs_data: this.outputsData,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3LXRyYW5zYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9yYXctdHJhbnNhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sU0FBUyxDQUFDO0FBRzdCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTNDLE1BQU0sT0FBTyxjQUFjO0lBSXpCLFlBQ1MsVUFBa0IsRUFDbEIsT0FBZSxFQUNmLFdBQXNCO1FBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU87UUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztLQUM3QixFQUNNLGFBQXVCLEVBQUUsRUFDaEIsVUFBa0IsS0FBSztRQVBoQyxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUdkO1FBQ00sZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQUNoQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUV2QyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDRCxRQUFRLENBQUMsR0FBbUI7UUFDMUIsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxNQUFNLE1BQU0sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ25DLE9BQU8sTUFBTTthQUNWLElBQUksQ0FDSCxJQUFJLE1BQU0sQ0FDUix1QkFBdUIsQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDcEUsQ0FDRjthQUNBLGFBQWEsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ04sVUFBVSxDQUFDLHNCQUFzQixDQUMvQixZQUFZLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQzNDLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTztZQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDeEIsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQy9CLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==