import { Options, TransactionSkeletonType } from "@ckb-lumos/helpers";
import { FromInfo } from "./from_info";
import { CellProvider, Script, PackedSince, Cell, Hash, HexString, Address, Header, QueryOptions, CellCollector as CellCollectorType } from "@ckb-lumos/base";
import { Config } from "@ckb-lumos/config-manager";
export interface SinceBaseValue {
    epoch: HexString;
    number: HexString;
    timestamp: HexString;
}
export interface LocktimeCell extends Cell {
    since: PackedSince;
    depositBlockHash?: Hash;
    withdrawBlockHash?: Hash;
    sinceBaseValue?: SinceBaseValue;
}
export declare class CellCollector implements CellCollectorType {
    private cellCollectors;
    private config;
    private rpc;
    private tipHeader?;
    readonly fromScript: Script;
    readonly multisigScript?: HexString;
    constructor(fromInfo: FromInfo, cellProvider: CellProvider, { config, queryOptions, tipHeader, NodeRPC, }?: Options & {
        queryOptions?: QueryOptions;
        tipHeader?: Header;
        NodeRPC?: any;
    });
    collect(): AsyncGenerator<LocktimeCell>;
}
export declare function transfer(txSkeleton: TransactionSkeletonType, fromInfos: FromInfo[], toAddress: Address | undefined, amount: bigint, tipHeader: Header, { config, requireToAddress, assertAmountEnough, LocktimeCellCollector, }: {
    config?: Config;
    requireToAddress?: boolean;
    assertAmountEnough?: true;
    LocktimeCellCollector?: any;
}): Promise<TransactionSkeletonType>;
export declare function transfer(txSkeleton: TransactionSkeletonType, fromInfos: FromInfo[], toAddress: Address | undefined, amount: bigint, tipHeader: Header, { config, requireToAddress, assertAmountEnough, LocktimeCellCollector, }: {
    config?: Config;
    requireToAddress?: boolean;
    assertAmountEnough: false;
    LocktimeCellCollector?: any;
}): Promise<[TransactionSkeletonType, bigint]>;
declare function injectCapacityWithoutChange(txSkeleton: TransactionSkeletonType, fromInfos: FromInfo[], amount: bigint, tipHeader: Header, minimalChangeCapacity: bigint, { config, LocktimeCellCollector, }: {
    config?: Config;
    LocktimeCellCollector?: any;
}): Promise<{
    txSkeleton: TransactionSkeletonType;
    capacity: bigint;
    changeCapacity: bigint;
}>;
export declare function payFee(txSkeleton: TransactionSkeletonType, fromInfos: FromInfo[], amount: bigint, tipHeader: Header, { config, LocktimeCellCollector, }?: {
    config?: Config;
    LocktimeCellCollector?: any;
}): Promise<TransactionSkeletonType>;
export declare function prepareSigningEntries(txSkeleton: TransactionSkeletonType, { config }?: Options): TransactionSkeletonType;
export declare function injectCapacity(txSkeleton: TransactionSkeletonType, outputIndex: number, fromInfos: FromInfo[], tipHeader: Header, { config, LocktimeCellCollector, }?: Options & {
    cellCollector?: (...params: any[]) => AsyncIterable<LocktimeCell>;
    LocktimeCellCollector?: any;
}): Promise<TransactionSkeletonType>;
export declare function setupInputCell(txSkeleton: TransactionSkeletonType, inputCell: Cell, fromInfo?: FromInfo, { config, since, defaultWitness, }?: Options & {
    defaultWitness?: HexString;
    since?: PackedSince;
}): Promise<TransactionSkeletonType>;
declare const _default: {
    CellCollector: typeof CellCollector;
    transfer: typeof transfer;
    payFee: typeof payFee;
    prepareSigningEntries: typeof prepareSigningEntries;
    injectCapacity: typeof injectCapacity;
    setupInputCell: typeof setupInputCell;
    injectCapacityWithoutChange: typeof injectCapacityWithoutChange;
};
export default _default;
