import { Address, Cell, CellCollector as CellCollectorType, CellProvider, HexString, PackedSince, QueryOptions, Script } from "@ckb-lumos/base";
import { Options, TransactionSkeletonType } from "@ckb-lumos/helpers";
import { FromInfo } from "./from_info";
export declare class CellCollector implements CellCollectorType {
    private cellCollector;
    private config;
    readonly fromScript: Script;
    constructor(fromInfo: FromInfo, cellProvider: CellProvider, { config, queryOptions, }?: Options & {
        queryOptions?: QueryOptions;
    });
    collect(): AsyncGenerator<Cell>;
}
export declare function setupInputCell(txSkeleton: TransactionSkeletonType, inputCell: Cell, _fromInfo?: FromInfo, { config, defaultWitness, since, }?: Options & {
    defaultWitness?: HexString;
    since?: PackedSince;
}): Promise<TransactionSkeletonType>;
export declare function checkLimit(acpArgs: HexString, capacity: bigint): void;
export declare function setupOutputCell(txSkeleton: TransactionSkeletonType, outputCell: Cell, { config }?: Options): Promise<TransactionSkeletonType>;
export declare function injectCapacity(cellCollector: CellCollector, txSkeleton: TransactionSkeletonType, outputIndex: number, capacity: bigint, { config }?: Options): Promise<TransactionSkeletonType>;
export declare function prepareSigningEntries(txSkeleton: TransactionSkeletonType, { config }?: Options): TransactionSkeletonType;
export declare function withdraw(txSkeleton: TransactionSkeletonType, fromInput: Cell, toAddress: Address, capacity: bigint, { config }?: Options): Promise<TransactionSkeletonType>;
declare const _default: {
    CellCollector: typeof CellCollector;
    setupInputCell: typeof setupInputCell;
    setupOutputCell: typeof setupOutputCell;
    injectCapacity: typeof injectCapacity;
    prepareSigningEntries: typeof prepareSigningEntries;
    withdraw: typeof withdraw;
};
export default _default;
