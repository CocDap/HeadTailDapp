import { Hash, Address, Header } from "@ckb-lumos/base";
import { FromInfo } from "./from_info";
import { TransactionSkeletonType, Options } from "@ckb-lumos/helpers";
export declare type Token = Hash;
/**
 * Issue an sUDT cell
 *
 * @param txSkeleton
 * @param fromInfo
 * @param amount
 * @param capacity
 * @param tipHeader
 * @param options
 */
export declare function issueToken(txSkeleton: TransactionSkeletonType, fromInfo: FromInfo, amount: bigint, capacity?: bigint, tipHeader?: Header, { config }?: Options): Promise<TransactionSkeletonType>;
/**
 *
 * @param txSkeleton
 * @param fromInfos
 * @param sudtToken
 * @param toAddress
 * @param amount
 * @param changeAddress if not provided, will use first fromInfo
 * @param capacity
 * @param tipHeader
 * @param options
 */
export declare function transfer(txSkeleton: TransactionSkeletonType, fromInfos: FromInfo[], sudtToken: Token, toAddress: Address, amount: bigint, changeAddress?: Address, capacity?: bigint, tipHeader?: Header, { config, LocktimePoolCellCollector, }?: Options & {
    LocktimePoolCellCollector?: any;
}): Promise<TransactionSkeletonType>;
/**
 * Compute sudt token by owner from info.
 *
 * @param fromInfo
 * @param options
 */
export declare function ownerForSudt(fromInfo: FromInfo, { config }?: Options): Token;
declare const _default: {
    issueToken: typeof issueToken;
    transfer: typeof transfer;
    ownerForSudt: typeof ownerForSudt;
};
export default _default;
