import { TransactionSkeletonType, Options } from "@ckb-lumos/helpers";
import { HexString, Script, Address, Cell, CellCollector as CellCollectorType, CellProvider, QueryOptions, PackedSince } from "@ckb-lumos/base";
import { Config } from "@ckb-lumos/config-manager";
import { FromInfo, serializeMultisigScript, multisigArgs } from "./from_info";
export { serializeMultisigScript, multisigArgs };
export declare class CellCollector implements CellCollectorType {
    private cellCollector;
    private config;
    readonly fromScript: Script;
    readonly multisigScript?: HexString;
    constructor(fromInfo: FromInfo, cellProvider: CellProvider, { config, queryOptions, }?: Options & {
        queryOptions?: QueryOptions;
    });
    collect(): AsyncGenerator<Cell>;
}
/**
 * Setup input cell infos, such as cell deps and witnesses.
 *
 * @param txSkeleton
 * @param inputCell
 * @param fromInfo
 * @param options
 */
export declare function setupInputCell(txSkeleton: TransactionSkeletonType, inputCell: Cell, fromInfo?: FromInfo, { config, defaultWitness, since, requireMultisigScript, }?: Options & {
    defaultWitness?: HexString;
    requireMultisigScript?: boolean;
    since?: PackedSince;
}): Promise<TransactionSkeletonType>;
export declare function transfer(txSkeleton: TransactionSkeletonType, fromInfo: FromInfo, toAddress: Address | undefined, amount: bigint, options?: {
    config?: Config;
    requireToAddress?: boolean;
    assertAmountEnough?: true;
}): Promise<TransactionSkeletonType>;
export declare function transfer(txSkeleton: TransactionSkeletonType, fromInfo: FromInfo, toAddress: Address | undefined, amount: bigint, options: {
    config?: Config;
    requireToAddress?: boolean;
    assertAmountEnough: false;
}): Promise<[TransactionSkeletonType, bigint]>;
/**
 * pay fee by multisig script cells
 *
 * @param txSkeleton
 * @param fromInfo
 * @param amount fee in shannon
 * @param options
 */
export declare function payFee(txSkeleton: TransactionSkeletonType, fromInfo: FromInfo, amount: bigint, { config }?: Options): Promise<TransactionSkeletonType>;
/**
 * Inject capacity from `fromInfo` to target output.
 *
 * @param txSkeleton
 * @param outputIndex
 * @param fromInfo
 * @param options
 */
export declare function injectCapacity(txSkeleton: TransactionSkeletonType, outputIndex: number, fromInfo: FromInfo, { config }?: Options): Promise<TransactionSkeletonType>;
/**
 * prepare for txSkeleton signingEntries, will update txSkeleton.get("signingEntries")
 *
 * @param txSkeleton
 * @param options
 */
export declare function prepareSigningEntries(txSkeleton: TransactionSkeletonType, { config }?: Options): TransactionSkeletonType;
declare const _default: {
    transfer: typeof transfer;
    payFee: typeof payFee;
    prepareSigningEntries: typeof prepareSigningEntries;
    serializeMultisigScript: typeof serializeMultisigScript;
    multisigArgs: typeof multisigArgs;
    injectCapacity: typeof injectCapacity;
    setupInputCell: typeof setupInputCell;
    CellCollector: typeof CellCollector;
};
export default _default;
