/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface HeadTail extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): HeadTail;
  clone(): HeadTail;
  methods: {
    stake(): NonPayableTransactionObject<string>;

    userOneAddress(): NonPayableTransactionObject<string>;

    userOneSignedChoiceHash(): NonPayableTransactionObject<string>;

    userTwoAddress(): NonPayableTransactionObject<string>;

    userTwoChoice(): NonPayableTransactionObject<boolean>;

    userTwoChoiceSubmittedTime(): NonPayableTransactionObject<string>;

    depositUserOne(
      _signedChoiceHash: string | number[],
      _stake: number | string | BN
    ): PayableTransactionObject<void>;

    depositUserTwo(choice: boolean): PayableTransactionObject<void>;

    revealUserOneChoice(
      choice: boolean,
      secret: string
    ): NonPayableTransactionObject<boolean>;

    timeout(): NonPayableTransactionObject<boolean>;

    getChainId(): NonPayableTransactionObject<string>;

    domainSeparator(): NonPayableTransactionObject<string>;

    verify(
      mail: [boolean, string],
      signature: string | number[]
    ): NonPayableTransactionObject<string>;

    verifyUpdated(
      mail: [boolean, string],
      signature: string | number[],
      codeHash: string | number[]
    ): NonPayableTransactionObject<string>;

    recover(
      message: string | number[],
      signature: string | number[],
      codeHash: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
